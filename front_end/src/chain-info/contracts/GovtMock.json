{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "get_verified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "verify_address",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr_to_verify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "verify_owner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/access/Ownable.sol",
    "1": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/introspection/ERC165.sol",
    "10": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Context.sol",
    "11": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/EnumerableMap.sol",
    "12": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/EnumerableSet.sol",
    "13": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Strings.sol",
    "14": "contracts/GovtMock.sol",
    "16": "contracts/NFTMinter.sol",
    "2": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/introspection/IERC165.sol",
    "3": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol",
    "4": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC721/ERC721.sol",
    "5": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC721/IERC721.sol",
    "6": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC721/IERC721Enumerable.sol",
    "7": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC721/IERC721Metadata.sol",
    "8": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC721/IERC721Receiver.sol",
    "9": "C:/Users/PREM/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Address.sol"
  },
  "ast": {
    "absolutePath": "contracts/GovtMock.sol",
    "exportedSymbols": {
      "GovtMock": [
        103
      ]
    },
    "id": 104,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.6",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:22:14"
      },
      {
        "absolutePath": "contracts/NFTMinter.sol",
        "file": "./NFTMinter.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 806,
        "src": "57:25:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [
          805
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 103,
        "linearizedBaseContracts": [
          103
        ],
        "name": "GovtMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "mutability": "mutable",
            "name": "minter",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 103,
            "src": "108:16:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_NFTMinter_$805",
              "typeString": "contract NFTMinter"
            },
            "typeName": {
              "contractScope": null,
              "id": 3,
              "name": "NFTMinter",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 805,
              "src": "108:9:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFTMinter_$805",
                "typeString": "contract NFTMinter"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 13,
              "nodeType": "Block",
              "src": "152:41:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 7,
                      "name": "minter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "162:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NFTMinter_$805",
                        "typeString": "contract NFTMinter"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "171:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_NFTMinter_$805_$",
                          "typeString": "function () returns (contract NFTMinter)"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 8,
                          "name": "NFTMinter",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 805,
                          "src": "175:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_NFTMinter_$805",
                            "typeString": "contract NFTMinter"
                          }
                        }
                      },
                      "id": 10,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "171:15:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_NFTMinter_$805",
                        "typeString": "contract NFTMinter"
                      }
                    },
                    "src": "162:24:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NFTMinter_$805",
                      "typeString": "contract NFTMinter"
                    }
                  },
                  "id": 12,
                  "nodeType": "ExpressionStatement",
                  "src": "162:24:14"
                }
              ]
            },
            "documentation": null,
            "id": 14,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "142:2:14"
            },
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "152:0:14"
            },
            "scope": 103,
            "src": "131:62:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 28,
              "nodeType": "Block",
              "src": "230:63:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 24,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "275:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 25,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "275:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 20,
                                "name": "minter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4,
                                "src": "258:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_NFTMinter_$805",
                                  "typeString": "contract NFTMinter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_NFTMinter_$805",
                                  "typeString": "contract NFTMinter"
                                }
                              ],
                              "id": 19,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "250:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 18,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "250:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 21,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "250:15:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 17,
                          "name": "NFTMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 805,
                          "src": "240:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_NFTMinter_$805_$",
                            "typeString": "type(contract NFTMinter)"
                          }
                        },
                        "id": 22,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "240:26:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_NFTMinter_$805",
                          "typeString": "contract NFTMinter"
                        }
                      },
                      "id": 23,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintNFT",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 733,
                      "src": "240:34:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) external returns (uint256)"
                      }
                    },
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "240:46:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 27,
                  "nodeType": "ExpressionStatement",
                  "src": "240:46:14"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a3ac0f7d",
            "id": 29,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "get_verified",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 15,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "220:2:14"
            },
            "returnParameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "230:0:14"
            },
            "scope": 103,
            "src": "199:94:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 79,
              "nodeType": "Block",
              "src": "359:279:14",
              "statements": [
                {
                  "assignments": [
                    40
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 40,
                      "mutability": "mutable",
                      "name": "assets",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 79,
                      "src": "369:23:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 38,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "369:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 39,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "369:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 41,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "369:23:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 52,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 42,
                      "name": "assets",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "402:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 50,
                          "name": "addr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 31,
                          "src": "447:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 46,
                                  "name": "minter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4,
                                  "src": "429:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_NFTMinter_$805",
                                    "typeString": "contract NFTMinter"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_NFTMinter_$805",
                                    "typeString": "contract NFTMinter"
                                  }
                                ],
                                "id": 45,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "421:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 44,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "421:7:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 47,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "421:15:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 43,
                            "name": "NFTMinter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 805,
                            "src": "411:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_NFTMinter_$805_$",
                              "typeString": "type(contract NFTMinter)"
                            }
                          },
                          "id": 48,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "411:26:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_NFTMinter_$805",
                            "typeString": "contract NFTMinter"
                          }
                        },
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "assetsOf",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 804,
                        "src": "411:35:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                          "typeString": "function (address) external returns (uint256[] memory)"
                        }
                      },
                      "id": 51,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "411:41:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "402:50:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 53,
                  "nodeType": "ExpressionStatement",
                  "src": "402:50:14"
                },
                {
                  "body": {
                    "id": 75,
                    "nodeType": "Block",
                    "src": "506:103:14",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 66,
                              "name": "addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31,
                              "src": "537:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 67,
                                "name": "assets",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "543:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 69,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 68,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 55,
                                "src": "550:1:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "543:9:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 65,
                            "name": "verify_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 102,
                            "src": "524:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) view returns (bool)"
                            }
                          },
                          "id": 70,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "524:29:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 74,
                        "nodeType": "IfStatement",
                        "src": "520:79:14",
                        "trueBody": {
                          "id": 73,
                          "nodeType": "Block",
                          "src": "555:44:14",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "74727565",
                                "id": 71,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "580:4:14",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 35,
                              "id": 72,
                              "nodeType": "Return",
                              "src": "573:11:14"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 61,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 58,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55,
                      "src": "482:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 59,
                        "name": "assets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40,
                        "src": "486:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 60,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "486:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "482:17:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 76,
                  "initializationExpression": {
                    "assignments": [
                      55
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 55,
                        "mutability": "mutable",
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 76,
                        "src": "467:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 54,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "467:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 57,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 56,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "479:1:14",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "467:13:14"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 63,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "501:3:14",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 62,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55,
                        "src": "501:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 64,
                    "nodeType": "ExpressionStatement",
                    "src": "501:3:14"
                  },
                  "nodeType": "ForStatement",
                  "src": "462:147:14"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 77,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "626:5:14",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 35,
                  "id": 78,
                  "nodeType": "Return",
                  "src": "619:12:14"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "e052bfba",
            "id": 80,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verify_address",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "mutability": "mutable",
                  "name": "addr",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 80,
                  "src": "323:12:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "322:14:14"
            },
            "returnParameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 80,
                  "src": "353:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "353:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "352:6:14"
            },
            "scope": 103,
            "src": "299:339:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 101,
              "nodeType": "Block",
              "src": "762:116:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 96,
                          "name": "tokenID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 84,
                          "src": "833:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 92,
                                  "name": "minter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4,
                                  "src": "809:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_NFTMinter_$805",
                                    "typeString": "contract NFTMinter"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_NFTMinter_$805",
                                    "typeString": "contract NFTMinter"
                                  }
                                ],
                                "id": 91,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "801:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 90,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "801:7:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 93,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "801:15:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 89,
                            "name": "NFTMinter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 805,
                            "src": "791:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_NFTMinter_$805_$",
                              "typeString": "type(contract NFTMinter)"
                            }
                          },
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "791:26:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_NFTMinter_$805",
                            "typeString": "contract NFTMinter"
                          }
                        },
                        "id": 95,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "original_owner",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 745,
                        "src": "791:41:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                          "typeString": "function (uint256) view external returns (address)"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "791:50:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 98,
                      "name": "addr_to_verify",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 82,
                      "src": "857:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "791:80:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 88,
                  "id": 100,
                  "nodeType": "Return",
                  "src": "772:99:14"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "2b7a8e12",
            "id": 102,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verify_owner",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "addr_to_verify",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 102,
                  "src": "666:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "666:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 84,
                  "mutability": "mutable",
                  "name": "tokenID",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 102,
                  "src": "690:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 83,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "690:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "665:41:14"
            },
            "returnParameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 102,
                  "src": "752:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 86,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "752:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "751:6:14"
            },
            "scope": 103,
            "src": "644:234:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 104,
        "src": "84:796:14"
      }
    ],
    "src": "33:848:14"
  },
  "bytecode": "",
  "bytecodeSha1": "c437f5e80bc2b6551ede18deeda09442e54cfc75",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.6+commit.6c089d02"
  },
  "contractName": "GovtMock",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {},
      "10": {},
      "11": {},
      "12": {},
      "13": {},
      "14": {
        "GovtMock.verify_address": {
          "6": [
            524,
            553,
            false
          ]
        }
      },
      "16": {},
      "2": {},
      "3": {},
      "4": {},
      "5": {},
      "6": {},
      "7": {},
      "8": {},
      "9": {}
    },
    "statements": {
      "0": {},
      "1": {},
      "10": {},
      "11": {},
      "12": {},
      "13": {},
      "14": {
        "GovtMock.get_verified": {
          "1": [
            240,
            286
          ]
        },
        "GovtMock.verify_address": {
          "2": [
            402,
            452
          ],
          "3": [
            573,
            584
          ],
          "4": [
            501,
            504
          ],
          "5": [
            619,
            631
          ]
        },
        "GovtMock.verify_owner": {
          "0": [
            772,
            871
          ]
        }
      },
      "16": {},
      "2": {},
      "3": {},
      "4": {},
      "5": {},
      "6": {},
      "7": {},
      "8": {},
      "9": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Address",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Context",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/ERC165",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/ERC721",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/EnumerableMap",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/EnumerableSet",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC165",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC721",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC721Enumerable",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC721Metadata",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/IERC721Receiver",
    "NFTMinter",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath",
    "OpenZeppelin/openzeppelin-contracts@3.4.0/Strings"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80632b7a8e1214610046578063a3ac0f7d14610086578063e052bfba14610090575b600080fd5b6100726004803603604081101561005c57600080fd5b506001600160a01b0381351690602001356100b6565b604080519115158252519081900360200190f35b61008e610141565b005b610072600480360360208110156100a657600080fd5b50356001600160a01b03166101bd565b600080546040805163f5af256b60e01b81526004810185905290516001600160a01b0380871693169163f5af256b916024808301926020929190829003018186803b15801561010457600080fd5b505afa158015610118573d6000803e3d6000fd5b505050506040513d602081101561012e57600080fd5b50516001600160a01b0316149392505050565b60008054604080516354ba0f2760e01b815233600482015290516001600160a01b03909216926354ba0f27926024808401936020939083900390910190829087803b15801561018f57600080fd5b505af11580156101a3573d6000803e3d6000fd5b505050506040513d60208110156101b957600080fd5b5050565b60008054604080516302c62fa160e41b81526001600160a01b03858116600483015291516060939290921691632c62fa1091602480820192879290919082900301818387803b15801561020f57600080fd5b505af1158015610223573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561024c57600080fd5b810190808051604051939291908464010000000082111561026c57600080fd5b90830190602082018581111561028157600080fd5b825186602082028301116401000000008211171561029e57600080fd5b82525081516020918201928201910280838360005b838110156102cb5781810151838201526020016102b3565b50505050905001604052505050905060008090505b815181101561031e57610306848383815181106102f957fe5b60200260200101516100b6565b1561031657600192505050610325565b6001016102e0565b5060009150505b91905056fea264697066735822122095887994d593768bb915e4d23ac6f4a00581348f5c6d3c5bf58e4ebd5d4de28f64736f6c63430006060033",
  "deployedSourceMap": "84:796:14:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;84:796:14;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;644:234:14;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;644:234:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;199:94;;;:::i;:::-;;299:339;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;299:339:14;-1:-1:-1;;;;;299:339:14;;:::i;644:234::-;752:4;809:6;;791:50;;;-1:-1:-1;;;791:50:14;;;;;;;;;;-1:-1:-1;;;;;791:80:14;;;;809:6;;791:41;;:50;;;;;;;;;;;;;;809:6;791:50;;;2:2:-1;;;;27:1;24;17:12;2:2;791:50:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;791:50:14;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;791:50:14;-1:-1:-1;;;;;791:80:14;;;644:234;-1:-1:-1;;;644:234:14:o;199:94::-;258:6;;;240:46;;;-1:-1:-1;;;240:46:14;;275:10;240:46;;;;;;-1:-1:-1;;;;;258:6:14;;;;240:34;;:46;;;;;;;;;;;;;;;;;258:6;240:46;;;2:2:-1;;;;27:1;24;17:12;2:2;240:46:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;240:46:14;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;199:94:14:o;299:339::-;353:4;429:6;;411:41;;;-1:-1:-1;;;411:41:14;;-1:-1:-1;;;;;411:41:14;;;;;;;;;369:23;;429:6;;;;;411:35;;:41;;;;;353:4;;411:41;;;;;;;;353:4;429:6;411:41;;;2:2:-1;;;;27:1;24;17:12;2:2;411:41:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;411:41:14;;;;;;39:16:-1;36:1;17:17;2:54;101:4;411:41:14;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;15:2;7:11;;4:2;;;31:1;28;21:12;4:2;411:41:14;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;411:41:14;;421:4:-1;412:14;;;;411:41:14;;;;;412:14:-1;411:41:14;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;411:41:14;;;;;;;;;;;402:50;;467:9;479:1;467:13;;462:147;486:6;:13;482:1;:17;462:147;;;524:29;537:4;543:6;550:1;543:9;;;;;;;;;;;;;;524:12;:29::i;:::-;520:79;;;580:4;573:11;;;;;;520:79;501:3;;462:147;;;;626:5;619:12;;;299:339;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "methods": {}
  },
  "offset": [
    84,
    880
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2B7A8E12 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA3AC0F7D EQ PUSH2 0x86 JUMPI DUP1 PUSH4 0xE052BFBA EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8E PUSH2 0x141 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x72 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xF5AF256B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP4 AND SWAP2 PUSH4 0xF5AF256B SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x118 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x54BA0F27 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x54BA0F27 SWAP3 PUSH1 0x24 DUP1 DUP5 ADD SWAP4 PUSH1 0x20 SWAP4 SWAP1 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2C62FA1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x60 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x2C62FA10 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 DUP8 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x223 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 DUP3 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2CB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B3 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x31E JUMPI PUSH2 0x306 DUP5 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB6 JUMP JUMPDEST ISZERO PUSH2 0x316 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x325 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2E0 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 DUP9 PUSH26 0x94D593768BB915E4D23AC6F4A00581348F5C6D3C5BF58E4EBD5D 0x4D 0xE2 DUP16 PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        84,
        880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "5": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "CALLVALUE",
      "path": "14"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "REVERT",
      "path": "14"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        84,
        880
      ],
      "op": "POP",
      "path": "14"
    },
    "18": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "21": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "LT",
      "path": "14"
    },
    "22": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x41"
    },
    "25": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "26": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "29": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "SHR",
      "path": "14"
    },
    "32": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "DUP1",
      "path": "14"
    },
    "33": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x2B7A8E12"
    },
    "38": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "EQ",
      "path": "14"
    },
    "39": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x46"
    },
    "42": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "43": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "DUP1",
      "path": "14"
    },
    "44": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xA3AC0F7D"
    },
    "49": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "EQ",
      "path": "14"
    },
    "50": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x86"
    },
    "53": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "54": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "DUP1",
      "path": "14"
    },
    "55": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xE052BFBA"
    },
    "60": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "EQ",
      "path": "14"
    },
    "61": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x90"
    },
    "64": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "65": {
      "fn": null,
      "offset": [
        84,
        880
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "66": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "68": {
      "op": "DUP1"
    },
    "69": {
      "first_revert": true,
      "op": "REVERT"
    },
    "70": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "71": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x72"
    },
    "74": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "76": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "DUP1",
      "path": "14"
    },
    "77": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "78": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SUB",
      "path": "14"
    },
    "79": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "81": {
      "op": "DUP2"
    },
    "82": {
      "op": "LT"
    },
    "83": {
      "op": "ISZERO"
    },
    "84": {
      "op": "PUSH2",
      "value": "0x5C"
    },
    "87": {
      "op": "JUMPI"
    },
    "88": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "90": {
      "op": "DUP1"
    },
    "91": {
      "op": "REVERT"
    },
    "92": {
      "op": "JUMPDEST"
    },
    "93": {
      "op": "POP"
    },
    "94": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "96": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "98": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "100": {
      "op": "SHL"
    },
    "101": {
      "op": "SUB"
    },
    "102": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "DUP2",
      "path": "14"
    },
    "103": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "104": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "AND",
      "path": "14"
    },
    "105": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "106": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "108": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "ADD",
      "path": "14"
    },
    "109": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "110": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xB6"
    },
    "113": {
      "fn": "GovtMock.verify_owner",
      "jump": "i",
      "offset": [
        644,
        878
      ],
      "op": "JUMP",
      "path": "14"
    },
    "114": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "115": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "117": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "DUP1",
      "path": "14"
    },
    "118": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "119": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "120": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "121": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "122": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "DUP3",
      "path": "14"
    },
    "123": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "124": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "125": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "126": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "DUP2",
      "path": "14"
    },
    "127": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "128": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SUB",
      "path": "14"
    },
    "129": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "131": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "ADD",
      "path": "14"
    },
    "132": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "133": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "RETURN",
      "path": "14"
    },
    "134": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "135": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x8E"
    },
    "138": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x141"
    },
    "141": {
      "fn": "GovtMock.get_verified",
      "jump": "i",
      "offset": [
        199,
        293
      ],
      "op": "JUMP",
      "path": "14"
    },
    "142": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "143": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "STOP",
      "path": "14"
    },
    "144": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "145": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x72"
    },
    "148": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "150": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "DUP1",
      "path": "14"
    },
    "151": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "152": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "SUB",
      "path": "14"
    },
    "153": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "155": {
      "op": "DUP2"
    },
    "156": {
      "op": "LT"
    },
    "157": {
      "op": "ISZERO"
    },
    "158": {
      "op": "PUSH2",
      "value": "0xA6"
    },
    "161": {
      "op": "JUMPI"
    },
    "162": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "164": {
      "op": "DUP1"
    },
    "165": {
      "op": "REVERT"
    },
    "166": {
      "op": "JUMPDEST"
    },
    "167": {
      "op": "POP"
    },
    "168": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "169": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "171": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "173": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "175": {
      "op": "SHL"
    },
    "176": {
      "op": "SUB"
    },
    "177": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "AND",
      "path": "14"
    },
    "178": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1BD"
    },
    "181": {
      "fn": "GovtMock.verify_address",
      "jump": "i",
      "offset": [
        299,
        638
      ],
      "op": "JUMP",
      "path": "14"
    },
    "182": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "183": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        752,
        756
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "185": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        809,
        815
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 0
    },
    "186": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        809,
        815
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "187": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "189": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP1",
      "path": "14"
    },
    "190": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "191": {
      "op": "PUSH4",
      "value": "0xF5AF256B"
    },
    "196": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "198": {
      "op": "SHL"
    },
    "199": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP2",
      "path": "14"
    },
    "200": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "201": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "203": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP2",
      "path": "14"
    },
    "204": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "ADD",
      "path": "14"
    },
    "205": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP6",
      "path": "14"
    },
    "206": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "207": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "208": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "209": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "210": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "214": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "216": {
      "op": "SHL"
    },
    "217": {
      "op": "SUB"
    },
    "218": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "DUP1",
      "path": "14"
    },
    "219": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "DUP8",
      "path": "14"
    },
    "220": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "AND",
      "path": "14"
    },
    "221": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "222": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        809,
        815
      ],
      "op": "AND",
      "path": "14"
    },
    "223": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        809,
        815
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "224": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        832
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xF5AF256B"
    },
    "229": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        832
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "230": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x24"
    },
    "232": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP1",
      "path": "14"
    },
    "233": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP4",
      "path": "14"
    },
    "234": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "ADD",
      "path": "14"
    },
    "235": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "236": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "238": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "239": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "240": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "241": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP3",
      "path": "14"
    },
    "242": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "243": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "SUB",
      "path": "14"
    },
    "244": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "ADD",
      "path": "14"
    },
    "245": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP2",
      "path": "14"
    },
    "246": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        809,
        815
      ],
      "op": "DUP7",
      "path": "14"
    },
    "247": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "DUP1",
      "path": "14"
    },
    "248": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "EXTCODESIZE",
      "path": "14"
    },
    "249": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "250": {
      "op": "DUP1"
    },
    "251": {
      "op": "ISZERO"
    },
    "252": {
      "op": "PUSH2",
      "value": "0x104"
    },
    "255": {
      "op": "JUMPI"
    },
    "256": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "258": {
      "op": "DUP1"
    },
    "259": {
      "op": "REVERT"
    },
    "260": {
      "op": "JUMPDEST"
    },
    "261": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "POP",
      "path": "14"
    },
    "262": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "GAS",
      "path": "14"
    },
    "263": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "264": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "265": {
      "op": "DUP1"
    },
    "266": {
      "op": "ISZERO"
    },
    "267": {
      "op": "PUSH2",
      "value": "0x118"
    },
    "270": {
      "op": "JUMPI"
    },
    "271": {
      "op": "RETURNDATASIZE"
    },
    "272": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "274": {
      "op": "DUP1"
    },
    "275": {
      "op": "RETURNDATACOPY"
    },
    "276": {
      "op": "RETURNDATASIZE"
    },
    "277": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "279": {
      "op": "REVERT"
    },
    "280": {
      "op": "JUMPDEST"
    },
    "281": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "POP",
      "path": "14"
    },
    "282": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "POP",
      "path": "14"
    },
    "283": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "POP",
      "path": "14"
    },
    "284": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "POP",
      "path": "14"
    },
    "285": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "287": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "288": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "289": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "291": {
      "op": "DUP2"
    },
    "292": {
      "op": "LT"
    },
    "293": {
      "op": "ISZERO"
    },
    "294": {
      "op": "PUSH2",
      "value": "0x12E"
    },
    "297": {
      "op": "JUMPI"
    },
    "298": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "300": {
      "op": "DUP1"
    },
    "301": {
      "op": "REVERT"
    },
    "302": {
      "op": "JUMPDEST"
    },
    "303": {
      "op": "POP"
    },
    "304": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        841
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "309": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "311": {
      "op": "SHL"
    },
    "312": {
      "op": "SUB"
    },
    "313": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "AND",
      "path": "14"
    },
    "314": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "EQ",
      "path": "14"
    },
    "315": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        791,
        871
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "316": {
      "fn": "GovtMock.verify_owner",
      "offset": [
        644,
        878
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "317": {
      "op": "POP"
    },
    "318": {
      "op": "POP"
    },
    "319": {
      "op": "POP"
    },
    "320": {
      "fn": "GovtMock.verify_owner",
      "jump": "o",
      "offset": [
        644,
        878
      ],
      "op": "JUMP",
      "path": "14"
    },
    "321": {
      "fn": "GovtMock.get_verified",
      "offset": [
        199,
        293
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "322": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 1,
      "value": "0x0"
    },
    "324": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "DUP1",
      "path": "14"
    },
    "325": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "326": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "328": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP1",
      "path": "14"
    },
    "329": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "330": {
      "op": "PUSH4",
      "value": "0x54BA0F27"
    },
    "335": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "337": {
      "op": "SHL"
    },
    "338": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP2",
      "path": "14"
    },
    "339": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "340": {
      "fn": "GovtMock.get_verified",
      "offset": [
        275,
        285
      ],
      "op": "CALLER",
      "path": "14"
    },
    "341": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "343": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP3",
      "path": "14"
    },
    "344": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "ADD",
      "path": "14"
    },
    "345": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "346": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "347": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "348": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "350": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "352": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "354": {
      "op": "SHL"
    },
    "355": {
      "op": "SUB"
    },
    "356": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "357": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "358": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "AND",
      "path": "14"
    },
    "359": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "360": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        274
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x54BA0F27"
    },
    "365": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        274
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "366": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x24"
    },
    "368": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP1",
      "path": "14"
    },
    "369": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP5",
      "path": "14"
    },
    "370": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "ADD",
      "path": "14"
    },
    "371": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "372": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "374": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "375": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "376": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP4",
      "path": "14"
    },
    "377": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "378": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SUB",
      "path": "14"
    },
    "379": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "380": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "381": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "ADD",
      "path": "14"
    },
    "382": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "383": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP3",
      "path": "14"
    },
    "384": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "385": {
      "fn": "GovtMock.get_verified",
      "offset": [
        258,
        264
      ],
      "op": "DUP8",
      "path": "14"
    },
    "386": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "DUP1",
      "path": "14"
    },
    "387": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "EXTCODESIZE",
      "path": "14"
    },
    "388": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "389": {
      "op": "DUP1"
    },
    "390": {
      "op": "ISZERO"
    },
    "391": {
      "op": "PUSH2",
      "value": "0x18F"
    },
    "394": {
      "op": "JUMPI"
    },
    "395": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "397": {
      "op": "DUP1"
    },
    "398": {
      "op": "REVERT"
    },
    "399": {
      "op": "JUMPDEST"
    },
    "400": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "POP",
      "path": "14"
    },
    "401": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "GAS",
      "path": "14"
    },
    "402": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "CALL",
      "path": "14"
    },
    "403": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "404": {
      "op": "DUP1"
    },
    "405": {
      "op": "ISZERO"
    },
    "406": {
      "op": "PUSH2",
      "value": "0x1A3"
    },
    "409": {
      "op": "JUMPI"
    },
    "410": {
      "op": "RETURNDATASIZE"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "413": {
      "op": "DUP1"
    },
    "414": {
      "op": "RETURNDATACOPY"
    },
    "415": {
      "op": "RETURNDATASIZE"
    },
    "416": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "418": {
      "op": "REVERT"
    },
    "419": {
      "op": "JUMPDEST"
    },
    "420": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "POP",
      "path": "14"
    },
    "421": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "POP",
      "path": "14"
    },
    "422": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "POP",
      "path": "14"
    },
    "423": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "POP",
      "path": "14"
    },
    "424": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "426": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "427": {
      "fn": "GovtMock.get_verified",
      "offset": [
        240,
        286
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "430": {
      "op": "DUP2"
    },
    "431": {
      "op": "LT"
    },
    "432": {
      "op": "ISZERO"
    },
    "433": {
      "op": "PUSH2",
      "value": "0x1B9"
    },
    "436": {
      "op": "JUMPI"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "439": {
      "op": "DUP1"
    },
    "440": {
      "op": "REVERT"
    },
    "441": {
      "op": "JUMPDEST"
    },
    "442": {
      "op": "POP"
    },
    "443": {
      "op": "POP"
    },
    "444": {
      "fn": "GovtMock.get_verified",
      "jump": "o",
      "offset": [
        199,
        293
      ],
      "op": "JUMP",
      "path": "14"
    },
    "445": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "446": {
      "fn": "GovtMock.verify_address",
      "offset": [
        353,
        357
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "448": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "DUP1",
      "path": "14",
      "statement": 2
    },
    "449": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "450": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "452": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "453": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "454": {
      "op": "PUSH4",
      "value": "0x2C62FA1"
    },
    "459": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "461": {
      "op": "SHL"
    },
    "462": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP2",
      "path": "14"
    },
    "463": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "464": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "468": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "470": {
      "op": "SHL"
    },
    "471": {
      "op": "SUB"
    },
    "472": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP6",
      "path": "14"
    },
    "473": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP2",
      "path": "14"
    },
    "474": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "AND",
      "path": "14"
    },
    "475": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "477": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP4",
      "path": "14"
    },
    "478": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "479": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "480": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "481": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "482": {
      "fn": "GovtMock.verify_address",
      "offset": [
        369,
        392
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x60"
    },
    "484": {
      "fn": "GovtMock.verify_address",
      "offset": [
        369,
        392
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "485": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "486": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "487": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "488": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "AND",
      "path": "14"
    },
    "489": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "490": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        446
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x2C62FA10"
    },
    "495": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        446
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "496": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x24"
    },
    "498": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "499": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP3",
      "path": "14"
    },
    "500": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "501": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "502": {
      "fn": "GovtMock.verify_address",
      "offset": [
        353,
        357
      ],
      "op": "DUP8",
      "path": "14"
    },
    "503": {
      "fn": "GovtMock.verify_address",
      "offset": [
        353,
        357
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "504": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "505": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "506": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "507": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP3",
      "path": "14"
    },
    "508": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "509": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SUB",
      "path": "14"
    },
    "510": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "511": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP2",
      "path": "14"
    },
    "512": {
      "fn": "GovtMock.verify_address",
      "offset": [
        353,
        357
      ],
      "op": "DUP4",
      "path": "14"
    },
    "513": {
      "fn": "GovtMock.verify_address",
      "offset": [
        429,
        435
      ],
      "op": "DUP8",
      "path": "14"
    },
    "514": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "515": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "EXTCODESIZE",
      "path": "14"
    },
    "516": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "517": {
      "op": "DUP1"
    },
    "518": {
      "op": "ISZERO"
    },
    "519": {
      "op": "PUSH2",
      "value": "0x20F"
    },
    "522": {
      "op": "JUMPI"
    },
    "523": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "525": {
      "op": "DUP1"
    },
    "526": {
      "op": "REVERT"
    },
    "527": {
      "op": "JUMPDEST"
    },
    "528": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "529": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "GAS",
      "path": "14"
    },
    "530": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "CALL",
      "path": "14"
    },
    "531": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "532": {
      "op": "DUP1"
    },
    "533": {
      "op": "ISZERO"
    },
    "534": {
      "op": "PUSH2",
      "value": "0x223"
    },
    "537": {
      "op": "JUMPI"
    },
    "538": {
      "op": "RETURNDATASIZE"
    },
    "539": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "541": {
      "op": "DUP1"
    },
    "542": {
      "op": "RETURNDATACOPY"
    },
    "543": {
      "op": "RETURNDATASIZE"
    },
    "544": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "546": {
      "op": "REVERT"
    },
    "547": {
      "op": "JUMPDEST"
    },
    "548": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "549": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "550": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "551": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "552": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "554": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "555": {
      "op": "RETURNDATASIZE"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "558": {
      "op": "DUP3"
    },
    "559": {
      "op": "RETURNDATACOPY"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "562": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "563": {
      "op": "SWAP1"
    },
    "564": {
      "op": "DUP2"
    },
    "565": {
      "op": "ADD"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "568": {
      "op": "NOT"
    },
    "569": {
      "op": "AND"
    },
    "570": {
      "op": "DUP3"
    },
    "571": {
      "op": "ADD"
    },
    "572": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "574": {
      "op": "MSTORE"
    },
    "575": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "577": {
      "op": "DUP2"
    },
    "578": {
      "op": "LT"
    },
    "579": {
      "op": "ISZERO"
    },
    "580": {
      "op": "PUSH2",
      "value": "0x24C"
    },
    "583": {
      "op": "JUMPI"
    },
    "584": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "586": {
      "op": "DUP1"
    },
    "587": {
      "op": "REVERT"
    },
    "588": {
      "op": "JUMPDEST"
    },
    "589": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP2",
      "path": "14"
    },
    "590": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "591": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "592": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "593": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "594": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "595": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "597": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "598": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "599": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "600": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "601": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "602": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP5",
      "path": "14"
    },
    "603": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "609": {
      "op": "DUP3"
    },
    "610": {
      "op": "GT"
    },
    "611": {
      "op": "ISZERO"
    },
    "612": {
      "op": "PUSH2",
      "value": "0x26C"
    },
    "615": {
      "op": "JUMPI"
    },
    "616": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "618": {
      "op": "DUP1"
    },
    "619": {
      "op": "REVERT"
    },
    "620": {
      "op": "JUMPDEST"
    },
    "621": {
      "op": "SWAP1"
    },
    "622": {
      "op": "DUP4"
    },
    "623": {
      "op": "ADD"
    },
    "624": {
      "op": "SWAP1"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "627": {
      "op": "DUP3"
    },
    "628": {
      "op": "ADD"
    },
    "629": {
      "op": "DUP6"
    },
    "630": {
      "op": "DUP2"
    },
    "631": {
      "op": "GT"
    },
    "632": {
      "op": "ISZERO"
    },
    "633": {
      "op": "PUSH2",
      "value": "0x281"
    },
    "636": {
      "op": "JUMPI"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "639": {
      "op": "DUP1"
    },
    "640": {
      "op": "REVERT"
    },
    "641": {
      "op": "JUMPDEST"
    },
    "642": {
      "op": "DUP3"
    },
    "643": {
      "op": "MLOAD"
    },
    "644": {
      "op": "DUP7"
    },
    "645": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "647": {
      "op": "DUP3"
    },
    "648": {
      "op": "MUL"
    },
    "649": {
      "op": "DUP4"
    },
    "650": {
      "op": "ADD"
    },
    "651": {
      "op": "GT"
    },
    "652": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "658": {
      "op": "DUP3"
    },
    "659": {
      "op": "GT"
    },
    "660": {
      "op": "OR"
    },
    "661": {
      "op": "ISZERO"
    },
    "662": {
      "op": "PUSH2",
      "value": "0x29E"
    },
    "665": {
      "op": "JUMPI"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "668": {
      "op": "DUP1"
    },
    "669": {
      "op": "REVERT"
    },
    "670": {
      "op": "JUMPDEST"
    },
    "671": {
      "op": "DUP3"
    },
    "672": {
      "op": "MSTORE"
    },
    "673": {
      "op": "POP"
    },
    "674": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP2",
      "path": "14"
    },
    "675": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "678": {
      "op": "SWAP2"
    },
    "679": {
      "op": "DUP3"
    },
    "680": {
      "op": "ADD"
    },
    "681": {
      "op": "SWAP3"
    },
    "682": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP3",
      "path": "14"
    },
    "683": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "684": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "685": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MUL",
      "path": "14"
    },
    "686": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP1",
      "path": "14"
    },
    "687": {
      "op": "DUP4"
    },
    "688": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "DUP4",
      "path": "14"
    },
    "689": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "691": {
      "op": "JUMPDEST"
    },
    "692": {
      "op": "DUP4"
    },
    "693": {
      "op": "DUP2"
    },
    "694": {
      "op": "LT"
    },
    "695": {
      "op": "ISZERO"
    },
    "696": {
      "op": "PUSH2",
      "value": "0x2CB"
    },
    "699": {
      "op": "JUMPI"
    },
    "700": {
      "op": "DUP2"
    },
    "701": {
      "op": "DUP2"
    },
    "702": {
      "op": "ADD"
    },
    "703": {
      "op": "MLOAD"
    },
    "704": {
      "op": "DUP4"
    },
    "705": {
      "op": "DUP3"
    },
    "706": {
      "op": "ADD"
    },
    "707": {
      "op": "MSTORE"
    },
    "708": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "710": {
      "op": "ADD"
    },
    "711": {
      "op": "PUSH2",
      "value": "0x2B3"
    },
    "714": {
      "op": "JUMP"
    },
    "715": {
      "op": "JUMPDEST"
    },
    "716": {
      "op": "POP"
    },
    "717": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "718": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "719": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "720": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "721": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "722": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "ADD",
      "path": "14"
    },
    "723": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "725": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "726": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "727": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "728": {
      "fn": "GovtMock.verify_address",
      "offset": [
        411,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "729": {
      "fn": "GovtMock.verify_address",
      "offset": [
        402,
        452
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "730": {
      "fn": "GovtMock.verify_address",
      "offset": [
        402,
        452
      ],
      "op": "POP",
      "path": "14"
    },
    "731": {
      "fn": "GovtMock.verify_address",
      "offset": [
        467,
        476
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "733": {
      "fn": "GovtMock.verify_address",
      "offset": [
        479,
        480
      ],
      "op": "DUP1",
      "path": "14"
    },
    "734": {
      "fn": "GovtMock.verify_address",
      "offset": [
        467,
        480
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "735": {
      "fn": "GovtMock.verify_address",
      "offset": [
        467,
        480
      ],
      "op": "POP",
      "path": "14"
    },
    "736": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "737": {
      "fn": "GovtMock.verify_address",
      "offset": [
        486,
        492
      ],
      "op": "DUP2",
      "path": "14"
    },
    "738": {
      "fn": "GovtMock.verify_address",
      "offset": [
        486,
        499
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "739": {
      "fn": "GovtMock.verify_address",
      "offset": [
        482,
        483
      ],
      "op": "DUP2",
      "path": "14"
    },
    "740": {
      "fn": "GovtMock.verify_address",
      "offset": [
        482,
        499
      ],
      "op": "LT",
      "path": "14"
    },
    "741": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "742": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x31E"
    },
    "745": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "746": {
      "fn": "GovtMock.verify_address",
      "offset": [
        524,
        553
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x306"
    },
    "749": {
      "fn": "GovtMock.verify_address",
      "offset": [
        537,
        541
      ],
      "op": "DUP5",
      "path": "14"
    },
    "750": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        549
      ],
      "op": "DUP4",
      "path": "14"
    },
    "751": {
      "fn": "GovtMock.verify_address",
      "offset": [
        550,
        551
      ],
      "op": "DUP4",
      "path": "14"
    },
    "752": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "DUP2",
      "path": "14"
    },
    "753": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "754": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "DUP2",
      "path": "14"
    },
    "755": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "LT",
      "path": "14"
    },
    "756": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2F9"
    },
    "759": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "760": {
      "dev": "Index out of range",
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "INVALID",
      "path": "14"
    },
    "761": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "762": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "764": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "MUL",
      "path": "14"
    },
    "765": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "767": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "ADD",
      "path": "14"
    },
    "768": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "ADD",
      "path": "14"
    },
    "769": {
      "fn": "GovtMock.verify_address",
      "offset": [
        543,
        552
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "770": {
      "fn": "GovtMock.verify_address",
      "offset": [
        524,
        536
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xB6"
    },
    "773": {
      "fn": "GovtMock.verify_address",
      "jump": "i",
      "offset": [
        524,
        553
      ],
      "op": "JUMP",
      "path": "14"
    },
    "774": {
      "branch": 6,
      "fn": "GovtMock.verify_address",
      "offset": [
        524,
        553
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "775": {
      "fn": "GovtMock.verify_address",
      "offset": [
        520,
        599
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "776": {
      "fn": "GovtMock.verify_address",
      "offset": [
        520,
        599
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x316"
    },
    "779": {
      "branch": 6,
      "fn": "GovtMock.verify_address",
      "offset": [
        520,
        599
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "780": {
      "fn": "GovtMock.verify_address",
      "offset": [
        580,
        584
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 3,
      "value": "0x1"
    },
    "782": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "783": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "POP",
      "path": "14"
    },
    "784": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "POP",
      "path": "14"
    },
    "785": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "POP",
      "path": "14"
    },
    "786": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x325"
    },
    "789": {
      "fn": "GovtMock.verify_address",
      "offset": [
        573,
        584
      ],
      "op": "JUMP",
      "path": "14"
    },
    "790": {
      "fn": "GovtMock.verify_address",
      "offset": [
        520,
        599
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "791": {
      "fn": "GovtMock.verify_address",
      "offset": [
        501,
        504
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 4,
      "value": "0x1"
    },
    "793": {
      "fn": "GovtMock.verify_address",
      "offset": [
        501,
        504
      ],
      "op": "ADD",
      "path": "14"
    },
    "794": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2E0"
    },
    "797": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "JUMP",
      "path": "14"
    },
    "798": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "799": {
      "fn": "GovtMock.verify_address",
      "offset": [
        462,
        609
      ],
      "op": "POP",
      "path": "14"
    },
    "800": {
      "fn": "GovtMock.verify_address",
      "offset": [
        626,
        631
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 5,
      "value": "0x0"
    },
    "802": {
      "fn": "GovtMock.verify_address",
      "offset": [
        619,
        631
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "803": {
      "fn": "GovtMock.verify_address",
      "offset": [
        619,
        631
      ],
      "op": "POP",
      "path": "14"
    },
    "804": {
      "fn": "GovtMock.verify_address",
      "offset": [
        619,
        631
      ],
      "op": "POP",
      "path": "14"
    },
    "805": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "806": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "807": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "808": {
      "fn": "GovtMock.verify_address",
      "offset": [
        299,
        638
      ],
      "op": "POP",
      "path": "14"
    },
    "809": {
      "fn": "GovtMock.verify_address",
      "jump": "o",
      "offset": [
        299,
        638
      ],
      "op": "JUMP",
      "path": "14"
    }
  },
  "sha1": "e874b3ddb956e500098945cee71fbf25cf0acda1",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\nimport \"./NFTMinter.sol\";\n\ncontract GovtMock {\n    NFTMinter minter;\n\n    constructor() public {\n        minter = new NFTMinter();\n    }\n\n    function get_verified() public {\n        NFTMinter(address(minter)).mintNFT(msg.sender);\n    }\n\n    function verify_address(address addr) public returns (bool) {\n        uint256[] memory assets;\n        assets = NFTMinter(address(minter)).assetsOf(addr);\n        for (uint256 i = 0; i < assets.length; i++) {\n            if (verify_owner(addr, assets[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function verify_owner(address addr_to_verify, uint256 tokenID)\n        public\n        view\n        returns (bool)\n    {\n        return\n            NFTMinter(address(minter)).original_owner(tokenID) ==\n            addr_to_verify;\n    }\n}\n",
  "sourceMap": "84:796:14:-:0;;;131:62;5:9:-1;2:2;;;27:1;24;17:12;2:2;131:62:14;171:15;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;162:6:14;:24;;-1:-1:-1;;;;;;162:24:14;-1:-1:-1;;;;;162:24:14;;;;;;;;;;84:796;;;;;;;;;;:::o;:::-;;;;;;;",
  "sourcePath": "contracts/GovtMock.sol",
  "type": "contract"
}